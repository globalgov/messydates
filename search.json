[{"path":[]},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement IHEID. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://globalgov.github.io/messydates/CODE_OF_CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/ code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https:// www.contributor-covenant.org/translations.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"Contributions qData, whether form issue identification, bug fixes, new code documentation encouraged welcome, research assistants (early) users package: Submit issue Fix bug implement new features Document existing code outlines propose change package Global Governance Observatory’s ecosystem. Please note qData project released Contributor Code Conduct. contributing project, agree abide terms.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"issues","dir":"","previous_headings":"","what":"Issues","title":"Contributing","text":"Please use issue tracker GitHub identify problems suggest new functionality, submitting changes code. use issues identify bugs tasks, discuss feature requests, track implementation changes. submitting issue, please provide least ‘Type’ label best describes issue . useful issues ones precisely identify bug, propose test pass instead fails.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"adding-new-code","dir":"","previous_headings":"","what":"Adding new code","title":"Contributing","text":"Independent assigned code contributions welcome. writing new code, please follow tidyverse style guide based standard R guidelines. can help use packages lintr goodpractice ensure followed. packages incorporated checks made pull request made. styler package fixes non-invasive way code adhere tidyverse formatting rules, also provides RStudio Addins help task. run lintr goodpractice checks use styler file run:","code":"# basic lintr checking lintr::lint_package(path = \"qData/\")  # goodpractices checks. Exclude length 80 goodpractice::gp(path = \"qData/\",    checks = all_checks()[-c(8)])  # styler fix some of the styling issues styler::style_file(\"filePath\")"},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing","text":"title PR briefly describe change. Please include summary changes issues fixed relevant motivation context. List dependencies required change, indicating whether major (breaking), minor, patch change. body PR contain Fixes #issue-number. checklist provided check cases different elements listed completed make sure steps respected. Make sure package passes R CMD check running devtools::check() commiting changes pull request. want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed openning pull request. ’ve found bug, please file issue illustrates bug minimal reprex. Please follow qData pull request guideline (https://github.com/globalgov/qData/blob/main/.github/pull_request_template.md)","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"branches","dir":"","previous_headings":"Pull request process","what":"Branches","title":"Contributing","text":"use two main branches project: origin/main branch reserved fully functional releases model. develop branch reaches stable point, code maintainer merges back master branch, tags release number . origin/develop branch reflects latest model development stage. Contributers encouraged submit minor changes branch enhance existing functionality. New features may break existing functionality committed supporting branches. use two types supporting branches: Feature branches used develop new functionality. exist long feature developed, either merged develop branch incorporation release, deleted feature abandoned. Feature branches branch origin/develop. Hotfix branches used provide fixes severe bugs main branch. way, code maintainer incorporate (potentially unstable) changes develop branch fix issue. Branch names prefixed hotfix-. branching model based : https://nvie.com/posts/-successful-git-branching-model/.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"main-branch-code-maintainer-only","dir":"","previous_headings":"Pull request process","what":"Main Branch (code maintainer only)","title":"Contributing","text":"create release version code: Ensure repository --date: git pull. Switch main branch: git checkout master. Merge changes develop branch: git merge ---ff develop. Tag release version: git tag -VX.Y.Z -m \"VERSION-NAME\". Push changes repository git push origin master --tags.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"develop-branch-minor-changes-to-existing-functionality","dir":"","previous_headings":"Pull request process","what":"Develop Branch (minor changes to existing functionality)","title":"Contributing","text":"make minor changes directly develop branch, follow standard git procedures: Make sure switched develop branch project: git checkout -b develop. Make sure local version code --date: git pull origin develop. Make changes Stage changes commit: git add PATH--CHANGED-FILE. Commit changes using appropriate message: git commit -m \"DESCRIPTION\". Push commit: git push origin develop.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"feature-branches-new-functionality","dir":"","previous_headings":"Pull request process","what":"Feature Branches (new functionality)","title":"Contributing","text":"create new feature branch: git checkout -b myfeature develop. merge feature branch back develop:","code":"git checkout develop git merge --no-ff myfeature git branch -d myfeature git push origin develop"},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"hotfix-branches-to-fix-critical-bugs-in-release-versions","dir":"","previous_headings":"Pull request process","what":"Hotfix Branches (to fix critical bugs in release versions)","title":"Contributing","text":"create new hotfix branch: git checkout -b hotfix-VERSION master. merge hotfix back master (code maintainer ): develop: Every hotfix increment PATCH digit version number: hotfix branch V1.3.0 named hotfix-V1.3.1, new release tagged V1.3.1. merged master develop, hotfix branch can deleted: git branch -d hotfix-VERSION.","code":"git checkout master git merge --no-ff hotfix-VERSION git tag -a VERSION git push origin develop git checkout develop git merge --no-ff hotfix-VERSION"},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"commit-messages","dir":"","previous_headings":"Pull request process","what":"Commit messages","title":"Contributing","text":"Commits relate existing issues reference updated status issues, mention issue number (preceded hash symbol: #) commit description: Resolved #31 adding new function things, also updated documentation issue hash (.e. #31) preceded resolve, resolves, resolved, close, closes, closed, fix, fixes, fixed (capitalised ), status issue(s) mentioned updated automatically. current syntactical standard mention issue first provide short description committed changes relation issue. ancillary changes can mentioned comma. written single line, like : #{verb} {issue} {describe main action/changes}, {additional actions/changes}. Note important write structured commit message improve efficiency collaboration. Please make sure : * Making title clear concise correct reference issue described . * Using subject line description part commit message outlines many different changes. * Explaining details changes made made using bullet points. * Separating paragraph blank line.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"testing","dir":"","previous_headings":"Pull request process","what":"Testing","title":"Contributing","text":"use testthat package write unit tests. convention, tests located testthat/tests/. verify tests pass issuing commit existing code. run tests latest version manually: writing new function, consider writing unit test function. follow several conventions writing tests: unit test file test one aspects single function. makes easier identify source bugs, prevents lower-level tests failing higher-level functions change. naming convention test files : test-FILENAME_IN_R_DIRECTORY-FUNCTION_NAME.R, .e. test files named file containing original function R directory, pre-fixed “test”, optionally post-fixed name function tested. test requires auxiliary functions package, e.g. initialize network sample data, belong helper file. one helper file R file, named helper-FILENAME_IN_R_DIRECTORY-FUNCTION_NAME.R. Re-using existing test data preferable creating new data every test.","code":"git pull library(\"testthat\") testthat::test_dir(\"tests/testthat\")"},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Contributing","text":"final way contributing package developing vignettes/articles illustrate value added package. Please contact us directly proposals updating documentation, submit issue existing documentation unclear.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"versioning","dir":"","previous_headings":"","what":"Versioning","title":"Contributing","text":"Note package versioned according semantic versioning. means versions follow Major.Minor.Patch semantic format. minor major level version also given new version name, updated zzz.R file.","code":""},{"path":"https://globalgov.github.io/messydates/CONTRIBUTING.html","id":"for-developers-using-macos","dir":"","previous_headings":"","what":"For developers using MacOS","title":"Contributing","text":"Develops using MacOS might meet problems compiling packages since compiling configuration R MacOS usually incorrect. one meet error error info “/usr/bin/ld: find -lgfortran”, can either correct configuration follows following steps solve problem: 1. Run “.libPaths()” command R get path, e.g. one might get “/Library/Frameworks/R.framework/Versions/3.6/Resources/library” 2. path one get first step “something/library”, open file “something/etc/Makeconf” comment line starting “FLIBS”. e.g. one might open file \" /Library/Frameworks/R.framework/Versions/3.6/Resources/etc/Makeconf\" change line “FLIBS = -L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin15/6.1.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath -lm” “#FLIBS = -L/usr/local/gfortran/lib/gcc/x86_64-apple-darwin15/6.1.0 -L/usr/local/gfortran/lib -lgfortran -lquadmath - lm”","code":""},{"path":"https://globalgov.github.io/messydates/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 messydates authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://globalgov.github.io/messydates/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"James Hollway. Maintainer, author, contributor.            IHEID Henrique Sposito. Contributor.            IHEID Jael Tan. Contributor.            IHEID Nathan Werth. Contributor.","code":""},{"path":"https://globalgov.github.io/messydates/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"J. Hollway. messydates: broader date class messy date information. 2021.","code":"@Manual{,   title = {messydates: A broader date class for messy date information},   author = {James Hollway},   year = {2021},   version = {0.4.0},   url = {https://github.com/globalgov/messydates}, }"},{"path":[]},{"path":"https://globalgov.github.io/messydates/index.html","id":"why-this-package","dir":"","previous_headings":"","what":"Why this package?","title":"A Flexible Class for Messy Dates","text":"Existing packages working dates R expect tidy. , coercible standard yyyy-mm-dd format. dates often messy. Sometimes know year something happened, leaving components date, month day, unspecified. often case historical dates, instance. Sometimes can say approximately event occurred, occurred certain date, recognise best estimate comes dubious source. times exists set range possible dates event. Although researchers generally recognise messiness, many feel expected force artificial precision unfortunate imprecision temporal data proceed analysis. example, know something happened 2021, might revert panel data design even greater precision available, opt replace date start year (2021-01-01), assuming erring earlier (later) side justifiable random date within month year. However, can create inferential issues timing sequence important. messydates assists problem retaining working various kinds date imprecision.","code":""},{"path":"https://globalgov.github.io/messydates/index.html","id":"a-quick-overview","dir":"","previous_headings":"","what":"A quick overview","title":"A Flexible Class for Messy Dates","text":"messydates implements R Extended Date/Time Format (EDTF) annotations set International Organization Standardization (ISO) outlined ISO 8601-2_2019(E). messydates introduces new mdate class embeds annotations, offers set methods constructing coercing mdate class, well tools working ‘messy’ dates. can seen table , date/time packages R handle ‘messy’ dates well. Normal “yyyy-mm-dd” structures date formats can easily coerced structure usually problem. However, syntaxes entirely ignored, historical dates dates eras (e.g. BCE), well written dates, frequently used historical texts treaties. times, existing packages return date, strip away annotations express uncertainty approximateness, introducing artificial precision. sometimes returning single date means ignoring information included. see end censored date, start date range, first set dates returned. Sometimes date components even seem guessed, 2021-01 (January 2021) assumed 1 December 2021 lubridate. messydates enables researchers retain information. analysis still expect precision dates work.","code":"pkg_comparison <- tibble::tribble(~Example, ~OriginalDate,                                   \"Normal date\", \"2012-01-01\",                                   \"Future date\", \"2599-12-31\",                                   \"Historical date\", \"476\",                                   \"Era date\", \"33 BC\",                                   \"Written date\", \"First of February, two thousand and twelve\",                                   \"DMY date\", \"10-31-2012\",                                   \"MDY date\", \"31-10-2012\",                                   \"Wrongly specified date\", \"2012-31-10\",                                   \"Approximate date\", \"2012-01-12~\",                                   \"Uncertain date\", \"2012-01-01?\",                                   \"Unspecified date\", \"2012-01\",                                   \"Censored date\", \"..2012-01-12\",                                    \"Range of dates\", \"2012-11-01:2012-12-01\",                                   \"Set of dates\", \"2012-5-26, 2012-11-19, 2012-12-4\") %>%   dplyr::mutate(base = as.Date(OriginalDate),                 lubridate = suppressWarnings(lubridate::as_date(OriginalDate)),                 messydates = messydates::as_messydate(OriginalDate))"},{"path":"https://globalgov.github.io/messydates/index.html","id":"working-with-messy-dates","dir":"","previous_headings":"","what":"Working with messy dates","title":"A Flexible Class for Messy Dates","text":"first way messydates assists researchers use dates mdate class provide methods converting back common date classes Date, POSIXct, POSIXlt. thus fully compatible packages lubridate {anydate}. messy date annotations can indicate multiple possible dates, messydates allows e.g. ranges sets dates unpacked expanded compatible dates. Since methods analysis modelling expect single date observations, offer ways resolve multiplicity coercing mdate-class objects date formats. example, researcher might explicitly choose favour min(), max(), mean(), median(), even random() date. greatly facilitates research transparency demanding conscious choice researchers, well supporting robustness checks enabling description inference across dates compatible messy annotated date. can seen table , ‘precise’ dates respected , returned matter ‘resolution’ function given. messy dates, choice function can make difference. year given, e.g. 0476 -0033, draw days year. minimum first January maximum 31st December. Dates also drawn set range dates given. approximate censored date known, depending whether whole date just component date annotated, range dates imputed based window (default 3 years, months, days), precise date resolved . translation via expanded list compatible dates fast, robust, extensible, allowing researchers use messy dates analytic strategy uses package.","code":"resolve_mdate <- pkg_comparison %>%    dplyr::select(messydates) %>%    dplyr::mutate(min = as.Date(messydates, min),          median = as.Date(messydates, median),          max = as.Date(messydates, max))"},{"path":"https://globalgov.github.io/messydates/index.html","id":"cheat-sheet","dir":"","previous_headings":"","what":"Cheat Sheet","title":"A Flexible Class for Messy Dates","text":"Please see cheat sheet messydates website information use messydates.","code":""},{"path":"https://globalgov.github.io/messydates/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A Flexible Class for Messy Dates","text":"easiest way install messydates directly CRAN: However, may also install development version GitHub.","code":"install.packages(\"messydates\") # install.packages(\"remotes\") remotes::install_github(\"globalgov/messydates\")"},{"path":"https://globalgov.github.io/messydates/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"A Flexible Class for Messy Dates","text":"package developed part PANARCHIC project, studies effects network power quickly states join, reform, create international institutions examining historical dynamics institutional networks different domains. PANARCHIC project funded Swiss National Science Foundation (SNSF). information current projects Geneva Global Governance Observatory, please see Github website.","code":""},{"path":"https://globalgov.github.io/messydates/reference/battles.html","id":null,"dir":"Reference","previous_headings":"","what":"Dates of battles in 2001 — battles","title":"Dates of battles in 2001 — battles","text":"dataset containing names dates battles 2001, according Wikipedia (https://en.wikipedia.org/wiki/List_of_battles_in_the_21st_century).","code":""},{"path":"https://globalgov.github.io/messydates/reference/battles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dates of battles in 2001 — battles","text":"","code":"battles"},{"path":"https://globalgov.github.io/messydates/reference/battles.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dates of battles in 2001 — battles","text":"data frame 20 rows 2 variables: Battle name battle, character Date date date range, mdate class vector Parties parties conflict, character US_party US party battle, numeric N_actors number actors conflict, numeric","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_create.html","id":null,"dir":"Reference","previous_headings":"","what":"A flexible date class for messy dates — class_create","title":"A flexible date class for messy dates — class_create","text":"Recent extensions standardised date notation ISO 8601-2_2019(E) create space unspecified, uncertain, approximate dates, well succinct representation ranges dates. functions create validate new date class R can contain parse annotations, typically user-facing. Please see as_messydate() user-facing coercion function.","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_create.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A flexible date class for messy dates — class_create","text":"","code":"new_messydate(x = character())  validate_messydate(x)"},{"path":"https://globalgov.github.io/messydates/reference/class_create.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A flexible date class for messy dates — class_create","text":"x character scalar vector expected \"yyyy-mm-dd\" format annotated, necessary, according ISO 8601-2_2019(E).","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_create.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A flexible date class for messy dates — class_create","text":"Object class mdate","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_create.html","id":"date-annotations","dir":"Reference","previous_headings":"","what":"Date annotations","title":"A flexible date class for messy dates — class_create","text":"Unspecified date components, day unknown, can represented one Xs place digits. modifier * recommended indicate entire time scale component value unspecified, e.g. X*-03-03, however implemented . Please explicit digits unspecified, e.g. XXXX-03-03 expresses 3rd March unspecified year, whereas 2003-XX-03 expresses 3rd month 2003. time components given, expanded . Approximate date components, modified ~, represent estimate whose value asserted possibly correct. example, 2003~-03-03 degree confidence approximation depends application. Uncertain date components, modified ?, represent date component whose source considered dubious therefore relied upon. additional modifier, %, used indicate value uncertain approximate.","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_create.html","id":"date-sets","dir":"Reference","previous_headings":"","what":"Date sets","title":"A flexible date class for messy dates — class_create","text":"functions also introduce standard notation ranges dates. Rather typical R notation ranges, :, ISO 8601-2_2019(E) recommends ... can applied two time scale components create standard range dates (inclusive), e.g. 2009-01-01..2019-01-01. can also used affix, indicating \"\" used prefix, e.g. ..2019-01-01, indicating \"\" used suffix, e.g. 2009-01-01... lastly, notation sets dates also included. braces, {}, used mean \"members set\", brackets, [], used mean \"one member set\".","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/reference/class_duration.html","id":null,"dir":"Reference","previous_headings":"","what":"A duration class for mdates — class_duration","title":"A duration class for mdates — class_duration","text":"mdates_duration class introduces methods annotate duration period representations uncertainty.","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_duration.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A duration class for mdates — class_duration","text":"","code":"new_messyduration(x = character())  messyduration(x, approx_range = 0)  validate_messyduration(x, approx_range = 0)  # S3 method for class 'character' messyduration(x, approx_range = 0)  # S3 method for class 'mdate' messyduration(x, approx_range = 0)"},{"path":"https://globalgov.github.io/messydates/reference/class_duration.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A duration class for mdates — class_duration","text":"x mdate variable ranges. approx_range Range expand approximate dates, days. 3, example, adds 3 days; -3, removes 3 days sides.","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_duration.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A duration class for mdates — class_duration","text":"Object class description","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_duration.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A duration class for mdates — class_duration","text":"R packages handle duration periods exact time date intervals. However, possible 'messy' dates uncertainty approximation might present. mdates_duration class accounts uncertainty approximation mdate objects return duration range possible dates.","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_duration.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A duration class for mdates — class_duration","text":"","code":"messyduration(as_messydate(c(\"2010-01-01..2010-12-31\", \"2010-01..2010-12\"))) #>  'mdates_duration' chr [1:2] \"2010-01-01..2010-12-31\" ..."},{"path":"https://globalgov.github.io/messydates/reference/class_make.html","id":null,"dir":"Reference","previous_headings":"","what":"Composes mdate from multiple variables — class_make","title":"Composes mdate from multiple variables — class_make","text":"Composes mdate multiple variables","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_make.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Composes mdate from multiple variables — class_make","text":"","code":"make_messydate(..., resequence = FALSE)"},{"path":"https://globalgov.github.io/messydates/reference/class_make.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Composes mdate from multiple variables — class_make","text":"... One (yyyy-mm-dd), two (yyyy-mm-dd, yyyy-mm-dd), three (yyyy, mm, dd) variables. resequence Users option choose order ambiguous dates without separators (e.g. \"11-01-12\" \"20112112\"). NULL default. options include: 'dmy', 'ymd', 'mdy', 'ym', '' 'interactive' 'dmy', dates converted DDMMYY format 6 digit dates, DDMMYYYY format 8 digit dates. 'ymd', dates converted YYMMDD format 6 digit dates, YYYYMMDD format 8 digit dates. 'mdy', dates converted MMDDYY format 6 digit dates MMDDYYYY format 8 digit dates. three options, ambiguous dates converted YY-MM-DD format 6 digit dates, YYYY-MM-DD format 8 digit dates. '', ambiguous 6 digit dates converted MM-YYYY format YYYY-MM. 'ym', ambiguous 6 digit dates converted YYYY-MM format. 'interactive', prompts users select existing component order ambiguous dates, based date reordered YYYY-MM-DD format completed YYYY-MM-DD format choose .","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_make.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Composes mdate from multiple variables — class_make","text":"three date variables passed make_messydate(), function create single date (yyyy-mm-dd) . two date variables passed make_messydate(), function create range dates (yyyy-mm-dd..yyyy-mm-dd). one date variable passed make_messydate(), function defaults as_messydate().","code":""},{"path":"https://globalgov.github.io/messydates/reference/class_make.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Composes mdate from multiple variables — class_make","text":"","code":"make_messydate(\"2010\", \"10\", \"10\") #>  'mdate' chr \"2010-10-10\""},{"path":"https://globalgov.github.io/messydates/reference/coerce_extrema.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolves messy dates into an extrema — coerce_extrema","title":"Resolves messy dates into an extrema — coerce_extrema","text":"collection S3 methods 'resolve' messy dates single date according explicit bias, returning minimum maximum date, mean, median, modal date, random date among possible resolutions messy date. date 'messy' (.e. annotations) just precise date returned. can useful various descriptive inferential projects.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_extrema.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolves messy dates into an extrema — coerce_extrema","text":"","code":"vmin(..., na.rm = FALSE)  # S3 method for class 'mdate' vmin(..., na.rm = TRUE)  # S3 method for class 'mdate' min(..., na.rm = TRUE)  vmax(..., na.rm = FALSE)  # S3 method for class 'mdate' vmax(..., na.rm = TRUE)  # S3 method for class 'mdate' max(..., na.rm = TRUE)"},{"path":"https://globalgov.github.io/messydates/reference/coerce_extrema.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolves messy dates into an extrema — coerce_extrema","text":"... mdate object na.rm NAs removed? True default.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_extrema.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolves messy dates into an extrema — coerce_extrema","text":"single scalar vector dates","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_extrema.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolves messy dates into an extrema — coerce_extrema","text":"","code":"d <- as_messydate(c(\"2008-03-25\", \"?2012-02-27\", \"2001-01?\", \"2001~\",   \"2001-01-01..2001-02-02\", \"{2001-01-01,2001-02-02}\",   \"{2001-01,2001-02-02}\", \"2008-XX-31\", \"-0050-01-01\")) d #>  'mdate' chr [1:9] \"2008-03-25\" \"?2012-02-27\" \"2001-01?\" \"~2001\" ... vmin(d) #>  'mdate' chr [1:9] \"2008-03-25\" \"2012-02-27\" \"2001-01-01\" \"2001-01-01\" ... min(d) #>  'mdate' chr \"-0050-01-01\" vmax(d) #>  'mdate' chr [1:9] \"2008-03-25\" \"2012-02-27\" \"2001-01-31\" \"2001-12-31\" ... max(d) #>  'mdate' chr \"2012-02-27\""},{"path":"https://globalgov.github.io/messydates/reference/coerce_from.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion from messy dates — coerce_from","title":"Coercion from messy dates — coerce_from","text":"functions coerce objects mdate class common date classes Date, POSIXct, POSIXlt. Since mdate objects can hold multiple individual dates, however, additional function must passed argument functions know coerce resolve multiple dates single date. example, one might wish use earliest possible date ranges dates (min), latest possible date (max), notion central tendency (mean, median, modal), even random selection among candidate dates. functions , building expand() resolve functions, particularly useful converting back mdate class use existing methods models, especially checking robustness results.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_from.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion from messy dates — coerce_from","text":"","code":"# S3 method for class 'mdate' as.Date(x, FUN = vmin, ...)  # S3 method for class 'mdate' as.POSIXct(x, tz = \"UTC\", FUN = vmin, ...)  # S3 method for class 'mdate' as.POSIXlt(x, tz = \"UTC\", FUN = vmin, ...)"},{"path":"https://globalgov.github.io/messydates/reference/coerce_from.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion from messy dates — coerce_from","text":"x mdate object FUN function can used resolve expanded messy dates single date. example, min(), max(), mean(), median(), modal(), random(). ... Arguments passed S3 generics. tz Character string specifying time zone conversion, required. default \"UTC\" (Universal Time Coordinated), equivalent GMT. \"\" current time zone used.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_from.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion from messy dates — coerce_from","text":"date object Date, POSIXct, POSIXlt class","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_from.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion from messy dates — coerce_from","text":"","code":"as.Date(as_messydate(\"2012-01\"), FUN = vmin) #> [1] \"2012-01-01\" as.Date(as_messydate(\"2012-01-01\"), FUN = vmean) #> [1] \"2012-01-01\" as.Date(as_messydate(\"2012-01\"), FUN = vmax) #> [1] \"2012-01-31\" as.Date(as_messydate(\"2012-01\"), FUN = vmedian) #> [1] \"2012-01-16\" as.Date(as_messydate(\"2012-01\"), FUN = vmodal) #> [1] \"2012-01-01\" as.Date(as_messydate(\"2012-01\"), FUN = vrandom) #> [1] \"2012-01-13\" as.Date(as_messydate(\"1000 BC\"), FUN = vmax) #> [1] \"-1000-12-31\" as.Date(as_messydate(\"1000 BC\"), FUN = vmedian) #> [1] \"-1000-07-02\" as.Date(as_messydate(c(\"-1000\", \"2020\")), FUN = vmin) #> [1] \"-1000-01-01\" \"2020-01-01\""},{"path":"https://globalgov.github.io/messydates/reference/coerce_tendency.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolves messy dates into a central tendency — coerce_tendency","title":"Resolves messy dates into a central tendency — coerce_tendency","text":"functions resolve messydates central tendency. functions mean(), median(), modal() summarise vector single value, v*() versions return vector length.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_tendency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolves messy dates into a central tendency — coerce_tendency","text":"","code":"# S3 method for class 'mdate' median(..., na.rm = TRUE)  vmedian(..., na.rm = TRUE)  # S3 method for class 'mdate' vmedian(..., na.rm = TRUE)  # S3 method for class 'mdate' mean(..., trim = 0, na.rm = TRUE)  vmean(..., na.rm = TRUE)  # S3 method for class 'mdate' vmean(..., trim = 0, na.rm = TRUE)  modal(..., na.rm = TRUE)  # S3 method for class 'mdate' modal(..., na.rm = TRUE)  vmodal(..., na.rm = TRUE)  # S3 method for class 'mdate' vmodal(..., na.rm = TRUE)  random(..., na.rm = TRUE)  # S3 method for class 'mdate' random(..., na.rm = TRUE)  vrandom(..., na.rm = TRUE)  # S3 method for class 'mdate' vrandom(..., na.rm = TRUE)"},{"path":"https://globalgov.github.io/messydates/reference/coerce_tendency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolves messy dates into a central tendency — coerce_tendency","text":"... mdate object na.rm NAs removed? True default. trim fraction (0 0.5) observations trimmed end x mean computed. Values trim outside range taken nearest endpoint.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_tendency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolves messy dates into a central tendency — coerce_tendency","text":"","code":"d <- as_messydate(c(\"2008-03-25\", \"?2012-02-27\", \"2001-01?\", \"2001~\",   \"2001-01-01..2001-02-02\", \"{2001-01-01,2001-02-02}\",   \"{2001-01,2001-02-02}\", \"2008-XX-31\", \"-0050-01-01\")) d #>  'mdate' chr [1:9] \"2008-03-25\" \"?2012-02-27\" \"2001-01?\" \"~2001\" ... median(d) #> Warning: argument is not numeric or logical: returning NA #> [1] NA vmedian(d) #> [1] \"2008-03-25\"  \"2012-02-27\"  \"2001-01-16\"  \"2001-07-02\"  \"2001-01-17\"  #> [6] \"2001-02-02\"  \"2001-01-17\"  \"2008-07-31\"  \"-0050-01-01\" mean(d) #> [1] \"1997-07-15\" vmean(d) #> [1] \"2008-03-25\" \"2012-02-27\" \"2001-01-16\" \"2001-07-02\" \"2001-01-17\" #> [6] \"2001-01-17\" \"2001-01-16\" \"2008-07-15\" \"50-01-01\"   modal(d) #> [1] \"2001-01-01\" vmodal(d) #> [1] \"2008-03-25\"  \"2012-02-27\"  \"2001-01-01\"  \"2001-01-01\"  \"2001-01-01\"  #> [6] \"2001-01-01\"  \"2001-01-01\"  \"2008-01-31\"  \"-0050-01-01\" random(d) #> [1] \"2001-01-09\" vrandom(d) #> [1] \"2008-03-25\"  \"2012-02-27\"  \"2001-01-05\"  \"2001-12-24\"  \"2001-01-31\"  #> [6] \"2001-02-02\"  \"2001-01-06\"  \"2008-09-30\"  \"-0050-01-01\""},{"path":"https://globalgov.github.io/messydates/reference/coerce_to.html","id":null,"dir":"Reference","previous_headings":"","what":"Coercion from regular date classes to mdate — coerce_to","title":"Coercion from regular date classes to mdate — coerce_to","text":"methods coerce various date classes mdate class. represent main user-facing class-creating functions package. addition typical date classes R (Date, POSIXct, POSIXlt), also direct method converting text character strings mdate. function can also extract dates text, though work--progress currently works English.","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_to.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coercion from regular date classes to mdate — coerce_to","text":"","code":"as_messydate(x, resequence = FALSE)  # S3 method for class 'Date' as_messydate(x, resequence = FALSE)  # S3 method for class 'POSIXct' as_messydate(x, resequence = FALSE)  # S3 method for class 'POSIXlt' as_messydate(x, resequence = FALSE)  # S3 method for class 'character' as_messydate(x, resequence = NULL)  # S3 method for class 'numeric' as_messydate(x, resequence = NULL)  # S3 method for class 'list' as_messydate(x, resequence = FALSE)  mdate(x, resequence = FALSE)"},{"path":"https://globalgov.github.io/messydates/reference/coerce_to.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coercion from regular date classes to mdate — coerce_to","text":"x scalar vector class can coerced mdate, Date, POSIXct, POSIXlt, character. resequence Users option choose order ambiguous dates without separators (e.g. \"11-01-12\" \"20112112\"). NULL default. options include: 'dmy', 'ymd', 'mdy', 'ym', '' 'interactive' 'dmy', dates converted DDMMYY format 6 digit dates, DDMMYYYY format 8 digit dates. 'ymd', dates converted YYMMDD format 6 digit dates, YYYYMMDD format 8 digit dates. 'mdy', dates converted MMDDYY format 6 digit dates MMDDYYYY format 8 digit dates. three options, ambiguous dates converted YY-MM-DD format 6 digit dates, YYYY-MM-DD format 8 digit dates. '', ambiguous 6 digit dates converted MM-YYYY format YYYY-MM. 'ym', ambiguous 6 digit dates converted YYYY-MM format. 'interactive', prompts users select existing component order ambiguous dates, based date reordered YYYY-MM-DD format completed YYYY-MM-DD format choose .","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_to.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coercion from regular date classes to mdate — coerce_to","text":"mdate class object","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_to.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Coercion from regular date classes to mdate — coerce_to","text":"as_messydate(): Core mdate class coercion function as_messydate(Date): Coerce Date mdate class as_messydate(POSIXct): Coerce POSIXct mdate class as_messydate(POSIXlt): Coerce POSIXlt mdate class as_messydate(character): Coerce character date objects mdate class as_messydate(numeric): Coerce numeric objects mdate class as_messydate(list): Coerce list date objects concise representation mdate class","code":""},{"path":"https://globalgov.github.io/messydates/reference/coerce_to.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coercion from regular date classes to mdate — coerce_to","text":"","code":"as_messydate(\"2021\") #>  'mdate' chr \"2021\" as_messydate(\"2021-02\") #>  'mdate' chr \"2021-02\" as_messydate(\"2021-02-01\") #>  'mdate' chr \"2021-02-01\" as_messydate(\"01-02-2021\") #>  'mdate' chr \"2021-02-01\" as_messydate(\"1 February 2021\") #>  'mdate' chr \"2021-02-01\" as_messydate(\"First of February, two thousand and twenty-one\") #>  'mdate' chr \"2021-02-01\" as_messydate(\"2021-02-01?\") #>  'mdate' chr \"2021-02-01?\" as_messydate(\"2021-02-01~\") #>  'mdate' chr \"2021-02-01~\" as_messydate(\"2021-02-01%\") #>  'mdate' chr \"2021-02-01%\" as_messydate(\"2021-02-01..2021-02-28\") #>  'mdate' chr \"2021-02-01..2021-02-28\" as_messydate(\"{2021-02-01,2021-02-28}\") #>  'mdate' chr \"{2021-02-01,2021-02-28}\" as_messydate(c(\"-2021\", \"2021 BC\", \"-2021-02-01\")) #>  'mdate' chr [1:3] \"-2021\" \"-2021\" \"-2021-02-01\" as_messydate(c(\"210201\", \"20210201\"), resequence = \"ymd\") #>  'mdate' chr [1:2] \"0021-02-01\" \"2021-02-01\" as_messydate(c(\"010221\", \"01022021\"), resequence = \"dmy\") #>  'mdate' chr [1:2] \"0021-02-01\" \"2021-02-01\" # as_messydate(c(\"01-02-21\", \"01-02-2021\", \"01-02-91\", \"01-02-1991\"), # resequence = \"interactive\") as_messydate(list(c(\"2012-06-01\", \"2012-06-02\", \"2012-06-03\"))) #> [[1]] #>  'mdate' chr \"2012-06-01..2012-06-03\" #>  as_messydate(list(c(\"2012-06-01\", \"2012-06-02\", \"2012-06-03\", \"{2012-06-01, 2012-06-02, 2012-06-03}\", \"2012-06-01\", \"2012-06-03\"))) #> [[1]] #>  'mdate' chr \"{2012-06-01..2012-06-03,2012-06-01..2012-06-03,2012-06-01,2012-06-03}\" #>"},{"path":"https://globalgov.github.io/messydates/reference/component_annotate.html","id":null,"dir":"Reference","previous_headings":"","what":"Annotates dates as censored, uncertain, or approximate — component_annotate","title":"Annotates dates as censored, uncertain, or approximate — component_annotate","text":"datasets example arbitrary cut point start end points, often coded precise dates necessarily real start end dates. collection functions helps annotate uncertainty approximation dates according ISO2019E standards. Inaccurate start end dates can represented affix indicating \"\", used prefix (e.g. ..1816-01-01), indicating \"\", used suffix (e.g. 2016-12-31..). Approximate dates indicated adding tilde year, month, day components, well groups components whole dates estimate values possibly correct (e.g. 2003-03-03~). Day, month, year, uncertainty can indicated adding question mark possibly dubious date (e.g. 1916-10-10?) date component (e.g. 1916-?10-10).","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_annotate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Annotates dates as censored, uncertain, or approximate — component_annotate","text":"","code":"on_or_before(x)  on_or_after(x)  as_approximate(x, component = NULL)  as_uncertain(x, component = NULL)"},{"path":"https://globalgov.github.io/messydates/reference/component_annotate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Annotates dates as censored, uncertain, or approximate — component_annotate","text":"x date vector component Annotation can added specific date components (\"year\", \"month\" \"day\"), groups date components (month day (\"md\"), year month (\"ym\")). must specified. unspecified, annotation added date (e.g. 1916-10-10?), indicating whole date uncertain approximate. specific date components, uncertainty approximation annotated left date component. E.g. \"day\": 1916-10-?10 1916-10-~10. groups date components, uncertainty approximation annotated right group (\"ym\") components (\"md\"). E.g. \"ym\": 1916-10~-10; \"md\": 1916-?10-?10.","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_annotate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Annotates dates as censored, uncertain, or approximate — component_annotate","text":"mdate object annotated date(s)","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_annotate.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Annotates dates as censored, uncertain, or approximate — component_annotate","text":"on_or_before(): prefixes dates \"..\" start date uncertain on_or_after(): suffixes dates \"..\" end date uncertain as_approximate(): adds tildes indicate approximate dates/date components as_uncertain(): adds question marks indicate dubious dates/date components.","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_annotate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Annotates dates as censored, uncertain, or approximate — component_annotate","text":"","code":"data <- data.frame(Beg = c(\"1816-01-01\", \"1916-01-01\", \"2016-01-01\"),   End = c(\"1816-12-31\", \"1916-12-31\", \"2016-12-31\")) dplyr::mutate(data, Beg = ifelse(Beg <= \"1816-01-01\",   on_or_before(Beg), Beg)) #>            Beg        End #> 1 ..1816-01-01 1816-12-31 #> 2   1916-01-01 1916-12-31 #> 3   2016-01-01 2016-12-31 dplyr::mutate(data, End = ifelse(End >= \"2016-01-01\",   on_or_after(End), End)) #>          Beg          End #> 1 1816-01-01   1816-12-31 #> 2 1916-01-01   1916-12-31 #> 3 2016-01-01 2016-12-31.. dplyr::mutate(data, Beg = ifelse(Beg == \"1916-01-01\",   as_approximate(Beg), Beg)) #>           Beg        End #> 1  1816-01-01 1816-12-31 #> 2 1916-01-01~ 1916-12-31 #> 3  2016-01-01 2016-12-31 dplyr::mutate(data, End = ifelse(End == \"1916-12-31\",   as_uncertain(End), End)) #>          Beg         End #> 1 1816-01-01  1816-12-31 #> 2 1916-01-01 1916-12-31? #> 3 2016-01-01  2016-12-31"},{"path":"https://globalgov.github.io/messydates/reference/component_extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracting components from messy dates — component_extract","title":"Extracting components from messy dates — component_extract","text":"functions allow extraction particular date components messy dates, year(), month(), day(). precision() allows identification greatest level precision (currently) first element date.","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracting components from messy dates — component_extract","text":"","code":"year(x)  month(x)  day(x)  precision(x)"},{"path":"https://globalgov.github.io/messydates/reference/component_extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracting components from messy dates — component_extract","text":"x mdate object","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracting components from messy dates — component_extract","text":"year(), month(), day() extraction return integer requested date component. precision() returns level greatest precision date.","code":""},{"path":"https://globalgov.github.io/messydates/reference/component_extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracting components from messy dates — component_extract","text":"","code":"year(as_messydate(c(\"2012-02-03\",\"2012\",\"2012-02\"))) #> [1] 2012 2012 2012 month(as_messydate(c(\"2012-02-03\",\"2012\",\"2012-02\"))) #> [1]  2 NA  2 day(as_messydate(c(\"2012-02-03\",\"2012\",\"2012-02\"))) #> [1]  3 NA NA precision(as_messydate(c(\"2012-02-03\",\"2012\",\"2012-02\"))) #> [1]   1 366  29"},{"path":"https://globalgov.github.io/messydates/reference/convert_contract.html","id":null,"dir":"Reference","previous_headings":"","what":"Contract lists of dates into messy dates — convert_contract","title":"Contract lists of dates into messy dates — convert_contract","text":"function operates opposite expand(). contracts list dates abbreviated annotation messy dates.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_contract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Contract lists of dates into messy dates — convert_contract","text":"","code":"contract(x, collapse = TRUE)"},{"path":"https://globalgov.github.io/messydates/reference/convert_contract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Contract lists of dates into messy dates — convert_contract","text":"x list dates collapse want ranges collapsed? TRUE default. FALSE ranges returned compact format.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_contract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Contract lists of dates into messy dates — convert_contract","text":"mdate vector","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_contract.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Contract lists of dates into messy dates — convert_contract","text":"´contract()´ function first expand() 'mdate' objects display succinct representation.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_contract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Contract lists of dates into messy dates — convert_contract","text":"","code":"d <- as_messydate(c(\"2001-01-01\", \"2001-01\", \"2001\", \"2001-01-01..2001-02-02\", \"{2001-10-01,2001-10-04}\", \"{2001-01,2001-02-02}\", \"28 BC\", \"-2000-01-01\", \"{2001-01-01, 2001-01-02, 2001-01-03}\")) dplyr::tibble(d, contract(d)) #> # A tibble: 9 × 2 #>   d                                  `contract(d)`           #>   <mdate>                            <mdate>                 #> 1 2001-01-01                         2001-01-01              #> 2 2001-01                            2001-01                 #> 3 2001                               2001                    #> 4 2001-01-01..2001-02-02             2001-01-01..2001-02-02  #> 5 {2001-10-01,2001-10-04}            {2001-10-01,2001-10-04} #> 6 {2001-01,2001-02-02}               {2001-01,2001-02-02}    #> 7 -0028                              -0028                   #> 8 -2000-01-01                        -2000-01-01             #> 9 {2001-01-01,2001-01-02,2001-01-03} 2001-01-01..2001-01-03"},{"path":"https://globalgov.github.io/messydates/reference/convert_expand.html","id":null,"dir":"Reference","previous_headings":"","what":"Expand messy dates to lists of dates — convert_expand","title":"Expand messy dates to lists of dates — convert_expand","text":"functions expand date ranges, sets dates, unspecified approximate dates (annotated '..', '', 'XX' '~'). messydates may refer several possible dates, function \"opens\" values reveal vector possible dates implied. Imprecise dates (dates containing information year /month) also expanded include possible dates within year /month. function removes annotation dates unreliable sources ('?'), expanded normally though incomplete.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_expand.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Expand messy dates to lists of dates — convert_expand","text":"","code":"expand(x, approx_range = 0)"},{"path":"https://globalgov.github.io/messydates/reference/convert_expand.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Expand messy dates to lists of dates — convert_expand","text":"x mdate object. 'mdate' object, conversion handled first ´as_messydate()´. approx_range Range expand approximate dates, date components, annotated '~', default 0. , removes signs approximate dates treats dates precise dates. 3, example, adds 3 days day approximation, 3 months month approximation, 3 years year/whole date approximation, 3 years 3 months year-month approximation, 3 months 3 days month-day approximation.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_expand.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Expand messy dates to lists of dates — convert_expand","text":"list dates, including dates range set.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_expand.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Expand messy dates to lists of dates — convert_expand","text":"","code":"d <- as_messydate(c(\"2008-03-25\", \"-2012-02-27\", \"2001-01?\", \"~2001\", \"2001-01-01..2001-02-02\", \"{2001-01-01,2001-02-02}\", \"{2001-01,2001-02-02}\", \"2008-XX-31\", \"..2002-02-03\", \"2001-01-03..\", \"28 BC\")) expand(d) #> [[1]] #> [1] \"2008-03-25\" #>  #> [[2]] #> [1] \"-2012-02-27\" #>  #> [[3]] #>  [1] \"2001-01-01\" \"2001-01-02\" \"2001-01-03\" \"2001-01-04\" \"2001-01-05\" #>  [6] \"2001-01-06\" \"2001-01-07\" \"2001-01-08\" \"2001-01-09\" \"2001-01-10\" #> [11] \"2001-01-11\" \"2001-01-12\" \"2001-01-13\" \"2001-01-14\" \"2001-01-15\" #> [16] \"2001-01-16\" \"2001-01-17\" \"2001-01-18\" \"2001-01-19\" \"2001-01-20\" #> [21] \"2001-01-21\" \"2001-01-22\" \"2001-01-23\" \"2001-01-24\" \"2001-01-25\" #> [26] \"2001-01-26\" \"2001-01-27\" \"2001-01-28\" \"2001-01-29\" \"2001-01-30\" #> [31] \"2001-01-31\" #>  #> [[4]] #>   [1] \"2001-01-01\" \"2001-01-02\" \"2001-01-03\" \"2001-01-04\" \"2001-01-05\" #>   [6] \"2001-01-06\" \"2001-01-07\" \"2001-01-08\" \"2001-01-09\" \"2001-01-10\" #>  [11] \"2001-01-11\" \"2001-01-12\" \"2001-01-13\" \"2001-01-14\" \"2001-01-15\" #>  [16] \"2001-01-16\" \"2001-01-17\" \"2001-01-18\" \"2001-01-19\" \"2001-01-20\" #>  [21] \"2001-01-21\" \"2001-01-22\" \"2001-01-23\" \"2001-01-24\" \"2001-01-25\" #>  [26] \"2001-01-26\" \"2001-01-27\" \"2001-01-28\" \"2001-01-29\" \"2001-01-30\" #>  [31] \"2001-01-31\" \"2001-02-01\" \"2001-02-02\" \"2001-02-03\" \"2001-02-04\" #>  [36] \"2001-02-05\" \"2001-02-06\" \"2001-02-07\" \"2001-02-08\" \"2001-02-09\" #>  [41] \"2001-02-10\" \"2001-02-11\" \"2001-02-12\" \"2001-02-13\" \"2001-02-14\" #>  [46] \"2001-02-15\" \"2001-02-16\" \"2001-02-17\" \"2001-02-18\" \"2001-02-19\" #>  [51] \"2001-02-20\" \"2001-02-21\" \"2001-02-22\" \"2001-02-23\" \"2001-02-24\" #>  [56] \"2001-02-25\" \"2001-02-26\" \"2001-02-27\" \"2001-02-28\" \"2001-03-01\" #>  [61] \"2001-03-02\" \"2001-03-03\" \"2001-03-04\" \"2001-03-05\" \"2001-03-06\" #>  [66] \"2001-03-07\" \"2001-03-08\" \"2001-03-09\" \"2001-03-10\" \"2001-03-11\" #>  [71] \"2001-03-12\" \"2001-03-13\" \"2001-03-14\" \"2001-03-15\" \"2001-03-16\" #>  [76] \"2001-03-17\" \"2001-03-18\" \"2001-03-19\" \"2001-03-20\" \"2001-03-21\" #>  [81] \"2001-03-22\" \"2001-03-23\" \"2001-03-24\" \"2001-03-25\" \"2001-03-26\" #>  [86] \"2001-03-27\" \"2001-03-28\" \"2001-03-29\" \"2001-03-30\" \"2001-03-31\" #>  [91] \"2001-04-01\" \"2001-04-02\" \"2001-04-03\" \"2001-04-04\" \"2001-04-05\" #>  [96] \"2001-04-06\" \"2001-04-07\" \"2001-04-08\" \"2001-04-09\" \"2001-04-10\" #> [101] \"2001-04-11\" \"2001-04-12\" \"2001-04-13\" \"2001-04-14\" \"2001-04-15\" #> [106] \"2001-04-16\" \"2001-04-17\" \"2001-04-18\" \"2001-04-19\" \"2001-04-20\" #> [111] \"2001-04-21\" \"2001-04-22\" \"2001-04-23\" \"2001-04-24\" \"2001-04-25\" #> [116] \"2001-04-26\" \"2001-04-27\" \"2001-04-28\" \"2001-04-29\" \"2001-04-30\" #> [121] \"2001-05-01\" \"2001-05-02\" \"2001-05-03\" \"2001-05-04\" \"2001-05-05\" #> [126] \"2001-05-06\" \"2001-05-07\" \"2001-05-08\" \"2001-05-09\" \"2001-05-10\" #> [131] \"2001-05-11\" \"2001-05-12\" \"2001-05-13\" \"2001-05-14\" \"2001-05-15\" #> [136] \"2001-05-16\" \"2001-05-17\" \"2001-05-18\" \"2001-05-19\" \"2001-05-20\" #> [141] \"2001-05-21\" \"2001-05-22\" \"2001-05-23\" \"2001-05-24\" \"2001-05-25\" #> [146] \"2001-05-26\" \"2001-05-27\" \"2001-05-28\" \"2001-05-29\" \"2001-05-30\" #> [151] \"2001-05-31\" \"2001-06-01\" \"2001-06-02\" \"2001-06-03\" \"2001-06-04\" #> [156] \"2001-06-05\" \"2001-06-06\" \"2001-06-07\" \"2001-06-08\" \"2001-06-09\" #> [161] \"2001-06-10\" \"2001-06-11\" \"2001-06-12\" \"2001-06-13\" \"2001-06-14\" #> [166] \"2001-06-15\" \"2001-06-16\" \"2001-06-17\" \"2001-06-18\" \"2001-06-19\" #> [171] \"2001-06-20\" \"2001-06-21\" \"2001-06-22\" \"2001-06-23\" \"2001-06-24\" #> [176] \"2001-06-25\" \"2001-06-26\" \"2001-06-27\" \"2001-06-28\" \"2001-06-29\" #> [181] \"2001-06-30\" \"2001-07-01\" \"2001-07-02\" \"2001-07-03\" \"2001-07-04\" #> [186] \"2001-07-05\" \"2001-07-06\" \"2001-07-07\" \"2001-07-08\" \"2001-07-09\" #> [191] \"2001-07-10\" \"2001-07-11\" \"2001-07-12\" \"2001-07-13\" \"2001-07-14\" #> [196] \"2001-07-15\" \"2001-07-16\" \"2001-07-17\" \"2001-07-18\" \"2001-07-19\" #> [201] \"2001-07-20\" \"2001-07-21\" \"2001-07-22\" \"2001-07-23\" \"2001-07-24\" #> [206] \"2001-07-25\" \"2001-07-26\" \"2001-07-27\" \"2001-07-28\" \"2001-07-29\" #> [211] \"2001-07-30\" \"2001-07-31\" \"2001-08-01\" \"2001-08-02\" \"2001-08-03\" #> [216] \"2001-08-04\" \"2001-08-05\" \"2001-08-06\" \"2001-08-07\" \"2001-08-08\" #> [221] \"2001-08-09\" \"2001-08-10\" \"2001-08-11\" \"2001-08-12\" \"2001-08-13\" #> [226] \"2001-08-14\" \"2001-08-15\" \"2001-08-16\" \"2001-08-17\" \"2001-08-18\" #> [231] \"2001-08-19\" \"2001-08-20\" \"2001-08-21\" \"2001-08-22\" \"2001-08-23\" #> [236] \"2001-08-24\" \"2001-08-25\" \"2001-08-26\" \"2001-08-27\" \"2001-08-28\" #> [241] \"2001-08-29\" \"2001-08-30\" \"2001-08-31\" \"2001-09-01\" \"2001-09-02\" #> [246] \"2001-09-03\" \"2001-09-04\" \"2001-09-05\" \"2001-09-06\" \"2001-09-07\" #> [251] \"2001-09-08\" \"2001-09-09\" \"2001-09-10\" \"2001-09-11\" \"2001-09-12\" #> [256] \"2001-09-13\" \"2001-09-14\" \"2001-09-15\" \"2001-09-16\" \"2001-09-17\" #> [261] \"2001-09-18\" \"2001-09-19\" \"2001-09-20\" \"2001-09-21\" \"2001-09-22\" #> [266] \"2001-09-23\" \"2001-09-24\" \"2001-09-25\" \"2001-09-26\" \"2001-09-27\" #> [271] \"2001-09-28\" \"2001-09-29\" \"2001-09-30\" \"2001-10-01\" \"2001-10-02\" #> [276] \"2001-10-03\" \"2001-10-04\" \"2001-10-05\" \"2001-10-06\" \"2001-10-07\" #> [281] \"2001-10-08\" \"2001-10-09\" \"2001-10-10\" \"2001-10-11\" \"2001-10-12\" #> [286] \"2001-10-13\" \"2001-10-14\" \"2001-10-15\" \"2001-10-16\" \"2001-10-17\" #> [291] \"2001-10-18\" \"2001-10-19\" \"2001-10-20\" \"2001-10-21\" \"2001-10-22\" #> [296] \"2001-10-23\" \"2001-10-24\" \"2001-10-25\" \"2001-10-26\" \"2001-10-27\" #> [301] \"2001-10-28\" \"2001-10-29\" \"2001-10-30\" \"2001-10-31\" \"2001-11-01\" #> [306] \"2001-11-02\" \"2001-11-03\" \"2001-11-04\" \"2001-11-05\" \"2001-11-06\" #> [311] \"2001-11-07\" \"2001-11-08\" \"2001-11-09\" \"2001-11-10\" \"2001-11-11\" #> [316] \"2001-11-12\" \"2001-11-13\" \"2001-11-14\" \"2001-11-15\" \"2001-11-16\" #> [321] \"2001-11-17\" \"2001-11-18\" \"2001-11-19\" \"2001-11-20\" \"2001-11-21\" #> [326] \"2001-11-22\" \"2001-11-23\" \"2001-11-24\" \"2001-11-25\" \"2001-11-26\" #> [331] \"2001-11-27\" \"2001-11-28\" \"2001-11-29\" \"2001-11-30\" \"2001-12-01\" #> [336] \"2001-12-02\" \"2001-12-03\" \"2001-12-04\" \"2001-12-05\" \"2001-12-06\" #> [341] \"2001-12-07\" \"2001-12-08\" \"2001-12-09\" \"2001-12-10\" \"2001-12-11\" #> [346] \"2001-12-12\" \"2001-12-13\" \"2001-12-14\" \"2001-12-15\" \"2001-12-16\" #> [351] \"2001-12-17\" \"2001-12-18\" \"2001-12-19\" \"2001-12-20\" \"2001-12-21\" #> [356] \"2001-12-22\" \"2001-12-23\" \"2001-12-24\" \"2001-12-25\" \"2001-12-26\" #> [361] \"2001-12-27\" \"2001-12-28\" \"2001-12-29\" \"2001-12-30\" \"2001-12-31\" #>  #> [[5]] #>  [1] \"2001-01-01\" \"2001-01-02\" \"2001-01-03\" \"2001-01-04\" \"2001-01-05\" #>  [6] \"2001-01-06\" \"2001-01-07\" \"2001-01-08\" \"2001-01-09\" \"2001-01-10\" #> [11] \"2001-01-11\" \"2001-01-12\" \"2001-01-13\" \"2001-01-14\" \"2001-01-15\" #> [16] \"2001-01-16\" \"2001-01-17\" \"2001-01-18\" \"2001-01-19\" \"2001-01-20\" #> [21] \"2001-01-21\" \"2001-01-22\" \"2001-01-23\" \"2001-01-24\" \"2001-01-25\" #> [26] \"2001-01-26\" \"2001-01-27\" \"2001-01-28\" \"2001-01-29\" \"2001-01-30\" #> [31] \"2001-01-31\" \"2001-02-01\" \"2001-02-02\" #>  #> [[6]] #> [1] \"2001-01-01\" \"2001-02-02\" #>  #> [[7]] #>  [1] \"2001-01-01\" \"2001-01-02\" \"2001-01-03\" \"2001-01-04\" \"2001-01-05\" #>  [6] \"2001-01-06\" \"2001-01-07\" \"2001-01-08\" \"2001-01-09\" \"2001-01-10\" #> [11] \"2001-01-11\" \"2001-01-12\" \"2001-01-13\" \"2001-01-14\" \"2001-01-15\" #> [16] \"2001-01-16\" \"2001-01-17\" \"2001-01-18\" \"2001-01-19\" \"2001-01-20\" #> [21] \"2001-01-21\" \"2001-01-22\" \"2001-01-23\" \"2001-01-24\" \"2001-01-25\" #> [26] \"2001-01-26\" \"2001-01-27\" \"2001-01-28\" \"2001-01-29\" \"2001-01-30\" #> [31] \"2001-01-31\" \"2001-02-02\" #>  #> [[8]] #>  [1] \"2008-01-31\" \"2008-02-28\" \"2008-03-31\" \"2008-04-30\" \"2008-05-31\" #>  [6] \"2008-06-30\" \"2008-07-31\" \"2008-08-31\" \"2008-09-30\" \"2008-10-31\" #> [11] \"2008-11-30\" \"2008-12-31\" #>  #> [[9]] #> [1] \"2002-02-03\" #>  #> [[10]] #> [1] \"2001-01-03\" #>  #> [[11]] #>   [1] \"-0028-01-01\" \"-0028-01-02\" \"-0028-01-03\" \"-0028-01-04\" \"-0028-01-05\" #>   [6] \"-0028-01-06\" \"-0028-01-07\" \"-0028-01-08\" \"-0028-01-09\" \"-0028-01-10\" #>  [11] \"-0028-01-11\" \"-0028-01-12\" \"-0028-01-13\" \"-0028-01-14\" \"-0028-01-15\" #>  [16] \"-0028-01-16\" \"-0028-01-17\" \"-0028-01-18\" \"-0028-01-19\" \"-0028-01-20\" #>  [21] \"-0028-01-21\" \"-0028-01-22\" \"-0028-01-23\" \"-0028-01-24\" \"-0028-01-25\" #>  [26] \"-0028-01-26\" \"-0028-01-27\" \"-0028-01-28\" \"-0028-01-29\" \"-0028-01-30\" #>  [31] \"-0028-01-31\" \"-0028-02-01\" \"-0028-02-02\" \"-0028-02-03\" \"-0028-02-04\" #>  [36] \"-0028-02-05\" \"-0028-02-06\" \"-0028-02-07\" \"-0028-02-08\" \"-0028-02-09\" #>  [41] \"-0028-02-10\" \"-0028-02-11\" \"-0028-02-12\" \"-0028-02-13\" \"-0028-02-14\" #>  [46] \"-0028-02-15\" \"-0028-02-16\" \"-0028-02-17\" \"-0028-02-18\" \"-0028-02-19\" #>  [51] \"-0028-02-20\" \"-0028-02-21\" \"-0028-02-22\" \"-0028-02-23\" \"-0028-02-24\" #>  [56] \"-0028-02-25\" \"-0028-02-26\" \"-0028-02-27\" \"-0028-02-28\" \"-0028-02-29\" #>  [61] \"-0028-03-01\" \"-0028-03-02\" \"-0028-03-03\" \"-0028-03-04\" \"-0028-03-05\" #>  [66] \"-0028-03-06\" \"-0028-03-07\" \"-0028-03-08\" \"-0028-03-09\" \"-0028-03-10\" #>  [71] \"-0028-03-11\" \"-0028-03-12\" \"-0028-03-13\" \"-0028-03-14\" \"-0028-03-15\" #>  [76] \"-0028-03-16\" \"-0028-03-17\" \"-0028-03-18\" \"-0028-03-19\" \"-0028-03-20\" #>  [81] \"-0028-03-21\" \"-0028-03-22\" \"-0028-03-23\" \"-0028-03-24\" \"-0028-03-25\" #>  [86] \"-0028-03-26\" \"-0028-03-27\" \"-0028-03-28\" \"-0028-03-29\" \"-0028-03-30\" #>  [91] \"-0028-03-31\" \"-0028-04-01\" \"-0028-04-02\" \"-0028-04-03\" \"-0028-04-04\" #>  [96] \"-0028-04-05\" \"-0028-04-06\" \"-0028-04-07\" \"-0028-04-08\" \"-0028-04-09\" #> [101] \"-0028-04-10\" \"-0028-04-11\" \"-0028-04-12\" \"-0028-04-13\" \"-0028-04-14\" #> [106] \"-0028-04-15\" \"-0028-04-16\" \"-0028-04-17\" \"-0028-04-18\" \"-0028-04-19\" #> [111] \"-0028-04-20\" \"-0028-04-21\" \"-0028-04-22\" \"-0028-04-23\" \"-0028-04-24\" #> [116] \"-0028-04-25\" \"-0028-04-26\" \"-0028-04-27\" \"-0028-04-28\" \"-0028-04-29\" #> [121] \"-0028-04-30\" \"-0028-05-01\" \"-0028-05-02\" \"-0028-05-03\" \"-0028-05-04\" #> [126] \"-0028-05-05\" \"-0028-05-06\" \"-0028-05-07\" \"-0028-05-08\" \"-0028-05-09\" #> [131] \"-0028-05-10\" \"-0028-05-11\" \"-0028-05-12\" \"-0028-05-13\" \"-0028-05-14\" #> [136] \"-0028-05-15\" \"-0028-05-16\" \"-0028-05-17\" \"-0028-05-18\" \"-0028-05-19\" #> [141] \"-0028-05-20\" \"-0028-05-21\" \"-0028-05-22\" \"-0028-05-23\" \"-0028-05-24\" #> [146] \"-0028-05-25\" \"-0028-05-26\" \"-0028-05-27\" \"-0028-05-28\" \"-0028-05-29\" #> [151] \"-0028-05-30\" \"-0028-05-31\" \"-0028-06-01\" \"-0028-06-02\" \"-0028-06-03\" #> [156] \"-0028-06-04\" \"-0028-06-05\" \"-0028-06-06\" \"-0028-06-07\" \"-0028-06-08\" #> [161] \"-0028-06-09\" \"-0028-06-10\" \"-0028-06-11\" \"-0028-06-12\" \"-0028-06-13\" #> [166] \"-0028-06-14\" \"-0028-06-15\" \"-0028-06-16\" \"-0028-06-17\" \"-0028-06-18\" #> [171] \"-0028-06-19\" \"-0028-06-20\" \"-0028-06-21\" \"-0028-06-22\" \"-0028-06-23\" #> [176] \"-0028-06-24\" \"-0028-06-25\" \"-0028-06-26\" \"-0028-06-27\" \"-0028-06-28\" #> [181] \"-0028-06-29\" \"-0028-06-30\" \"-0028-07-01\" \"-0028-07-02\" \"-0028-07-03\" #> [186] \"-0028-07-04\" \"-0028-07-05\" \"-0028-07-06\" \"-0028-07-07\" \"-0028-07-08\" #> [191] \"-0028-07-09\" \"-0028-07-10\" \"-0028-07-11\" \"-0028-07-12\" \"-0028-07-13\" #> [196] \"-0028-07-14\" \"-0028-07-15\" \"-0028-07-16\" \"-0028-07-17\" \"-0028-07-18\" #> [201] \"-0028-07-19\" \"-0028-07-20\" \"-0028-07-21\" \"-0028-07-22\" \"-0028-07-23\" #> [206] \"-0028-07-24\" \"-0028-07-25\" \"-0028-07-26\" \"-0028-07-27\" \"-0028-07-28\" #> [211] \"-0028-07-29\" \"-0028-07-30\" \"-0028-07-31\" \"-0028-08-01\" \"-0028-08-02\" #> [216] \"-0028-08-03\" \"-0028-08-04\" \"-0028-08-05\" \"-0028-08-06\" \"-0028-08-07\" #> [221] \"-0028-08-08\" \"-0028-08-09\" \"-0028-08-10\" \"-0028-08-11\" \"-0028-08-12\" #> [226] \"-0028-08-13\" \"-0028-08-14\" \"-0028-08-15\" \"-0028-08-16\" \"-0028-08-17\" #> [231] \"-0028-08-18\" \"-0028-08-19\" \"-0028-08-20\" \"-0028-08-21\" \"-0028-08-22\" #> [236] \"-0028-08-23\" \"-0028-08-24\" \"-0028-08-25\" \"-0028-08-26\" \"-0028-08-27\" #> [241] \"-0028-08-28\" \"-0028-08-29\" \"-0028-08-30\" \"-0028-08-31\" \"-0028-09-01\" #> [246] \"-0028-09-02\" \"-0028-09-03\" \"-0028-09-04\" \"-0028-09-05\" \"-0028-09-06\" #> [251] \"-0028-09-07\" \"-0028-09-08\" \"-0028-09-09\" \"-0028-09-10\" \"-0028-09-11\" #> [256] \"-0028-09-12\" \"-0028-09-13\" \"-0028-09-14\" \"-0028-09-15\" \"-0028-09-16\" #> [261] \"-0028-09-17\" \"-0028-09-18\" \"-0028-09-19\" \"-0028-09-20\" \"-0028-09-21\" #> [266] \"-0028-09-22\" \"-0028-09-23\" \"-0028-09-24\" \"-0028-09-25\" \"-0028-09-26\" #> [271] \"-0028-09-27\" \"-0028-09-28\" \"-0028-09-29\" \"-0028-09-30\" \"-0028-10-01\" #> [276] \"-0028-10-02\" \"-0028-10-03\" \"-0028-10-04\" \"-0028-10-05\" \"-0028-10-06\" #> [281] \"-0028-10-07\" \"-0028-10-08\" \"-0028-10-09\" \"-0028-10-10\" \"-0028-10-11\" #> [286] \"-0028-10-12\" \"-0028-10-13\" \"-0028-10-14\" \"-0028-10-15\" \"-0028-10-16\" #> [291] \"-0028-10-17\" \"-0028-10-18\" \"-0028-10-19\" \"-0028-10-20\" \"-0028-10-21\" #> [296] \"-0028-10-22\" \"-0028-10-23\" \"-0028-10-24\" \"-0028-10-25\" \"-0028-10-26\" #> [301] \"-0028-10-27\" \"-0028-10-28\" \"-0028-10-29\" \"-0028-10-30\" \"-0028-10-31\" #> [306] \"-0028-11-01\" \"-0028-11-02\" \"-0028-11-03\" \"-0028-11-04\" \"-0028-11-05\" #> [311] \"-0028-11-06\" \"-0028-11-07\" \"-0028-11-08\" \"-0028-11-09\" \"-0028-11-10\" #> [316] \"-0028-11-11\" \"-0028-11-12\" \"-0028-11-13\" \"-0028-11-14\" \"-0028-11-15\" #> [321] \"-0028-11-16\" \"-0028-11-17\" \"-0028-11-18\" \"-0028-11-19\" \"-0028-11-20\" #> [326] \"-0028-11-21\" \"-0028-11-22\" \"-0028-11-23\" \"-0028-11-24\" \"-0028-11-25\" #> [331] \"-0028-11-26\" \"-0028-11-27\" \"-0028-11-28\" \"-0028-11-29\" \"-0028-11-30\" #> [336] \"-0028-12-01\" \"-0028-12-02\" \"-0028-12-03\" \"-0028-12-04\" \"-0028-12-05\" #> [341] \"-0028-12-06\" \"-0028-12-07\" \"-0028-12-08\" \"-0028-12-09\" \"-0028-12-10\" #> [346] \"-0028-12-11\" \"-0028-12-12\" \"-0028-12-13\" \"-0028-12-14\" \"-0028-12-15\" #> [351] \"-0028-12-16\" \"-0028-12-17\" \"-0028-12-18\" \"-0028-12-19\" \"-0028-12-20\" #> [356] \"-0028-12-21\" \"-0028-12-22\" \"-0028-12-23\" \"-0028-12-24\" \"-0028-12-25\" #> [361] \"-0028-12-26\" \"-0028-12-27\" \"-0028-12-28\" \"-0028-12-29\" \"-0028-12-30\" #> [366] \"-0028-12-31\" #>"},{"path":"https://globalgov.github.io/messydates/reference/convert_sequence.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequence method for messydates — convert_sequence","title":"Sequence method for messydates — convert_sequence","text":"function provides sequence (seq()) method messydates. can used ranges unspecified dates, particularly useful defining sequence dates common era eras.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_sequence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequence method for messydates — convert_sequence","text":"","code":"# S3 method for class 'mdate' seq(from, to, by = \"days\", ...)"},{"path":"https://globalgov.github.io/messydates/reference/convert_sequence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequence method for messydates — convert_sequence","text":"messydate range. '' range '' specified, '' minimum range '' maximum. messydate. Increment sequence. default \"days\". ... Arguments passed methods.","code":""},{"path":"https://globalgov.github.io/messydates/reference/convert_sequence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequence method for messydates — convert_sequence","text":"","code":"seq(mdate(\"-0001-12-20\"), mdate(\"0001-01-10\")) #>  [1] \"-0001-12-20\" \"-0001-12-21\" \"-0001-12-22\" \"-0001-12-23\" \"-0001-12-24\" #>  [6] \"-0001-12-25\" \"-0001-12-26\" \"-0001-12-27\" \"-0001-12-28\" \"-0001-12-29\" #> [11] \"-0001-12-30\" \"-0001-12-31\" \"0001-01-01\"  \"0001-01-02\"  \"0001-01-03\"  #> [16] \"0001-01-04\"  \"0001-01-05\"  \"0001-01-06\"  \"0001-01-07\"  \"0001-01-08\"  #> [21] \"0001-01-09\"  \"0001-01-10\""},{"path":"https://globalgov.github.io/messydates/reference/defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions that have been renamed, superseded, or are no longer working — defunct","title":"Functions that have been renamed, superseded, or are no longer working — defunct","text":"Generally functions superseded renamed. Upon using , message provided directing user new function. However, stage package development, generally clear older defunct functions minor release, strongly encouraged use new functions/names/syntax wherever possible update scripts accordingly.","code":""},{"path":"https://globalgov.github.io/messydates/reference/defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions that have been renamed, superseded, or are no longer working — defunct","text":"","code":"is_element(.data)  md_intersect(.data)  md_union(.data)  md_multiset(.data)"},{"path":"https://globalgov.github.io/messydates/reference/defunct.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Functions that have been renamed, superseded, or are no longer working — defunct","text":"is_element(): Deprecated 2023-08-25. md_intersect(): Deprecated 2023-08-25. md_union(): Deprecated 2023-08-25. md_multiset(): Deprecated 2023-08-25.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_arithmetic.html","id":null,"dir":"Reference","previous_headings":"","what":"Arithmetic operations for messydates — operate_arithmetic","title":"Arithmetic operations for messydates — operate_arithmetic","text":"operations allow users add subtract dates messydate objects. Messydate objects include incomplete uncertain dates, ranges dates, negative dates, date sets.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_arithmetic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arithmetic operations for messydates — operate_arithmetic","text":"","code":"# S3 method for class 'mdate' e1 + e2  # S3 method for class 'mdate' e1 - e2"},{"path":"https://globalgov.github.io/messydates/reference/operate_arithmetic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arithmetic operations for messydates — operate_arithmetic","text":"e1 mdate date object. e2 mdate, date, numeric object. Must scalar.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_arithmetic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arithmetic operations for messydates — operate_arithmetic","text":"messydates vector","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_arithmetic.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arithmetic operations for messydates — operate_arithmetic","text":"","code":"# \\donttest{ d <- as_messydate(c(\"2008-03-25\", \"-2012-02-27\", \"2001-01?\", \"~2001\", \"2001-01-01..2001-02-02\", \"{2001-01-01,2001-02-02}\", \"2008-XX-31\", \"..2002-02-03\", \"2001-01-03..\", \"28 BC\")) dplyr::tibble(date = d, add = d + 1, subtract = d - 1) #> # A tibble: 10 × 3 #>    date                    add                     subtract                #>    <mdate>                 <mdate>                 <mdate>                 #>  1 2008-03-25              2008-03-26              2008-03-24              #>  2 -2012-02-27             -2012-02-26             -2012-02-28             #>  3 2001-01?                2001-01-02..2001-02-01  2000-12-31..2001-01-30  #>  4 ~2001                   2001-01-02..2002-01-01  2000-12-31..2001-12-30  #>  5 2001-01-01..2001-02-02  2001-01-02..2001-02-03  2000-12-31..2001-02-01  #>  6 {2001-01-01,2001-02-02} {2001-01-02,2001-02-03} {2000-12-31,2001-02-01} #>  7 2008-XX-31              2008-02-01              2008-XX-30              #>  8 ..2002-02-03            ..2002-02-04            ..2002-02-02            #>  9 2001-01-03..            2001-01-04..            2001-01-02..            #> 10 -0028                   -0027-12-31..-28-12-30  -0028-01-02..-29-01-01  dplyr::tibble(date = d, add = d + \"1 year\", subtract = d - \"1 year\") #> # A tibble: 10 × 3 #>    date                    add                     subtract                #>    <mdate>                 <mdate>                 <mdate>                 #>  1 2008-03-25              2009-03-25              2007-03-26              #>  2 -2012-02-27             -2011-02-27             -2013-02-26             #>  3 2001-01?                2002-01                 2000-01-02..2000-02-01  #>  4 ~2001                   2002                    2000-01-02..2000-12-31  #>  5 2001-01-01..2001-02-02  2002-01-01..2002-02-02  2000-01-02..2000-02-03  #>  6 {2001-01-01,2001-02-02} {2002-01-01,2002-02-02} {2000-01-02,2000-02-03} #>  7 2008-XX-31              2009-XX-30              2007-XX-31              #>  8 ..2002-02-03            ..2003-02-03            ..2001-02-03            #>  9 2001-01-03..            2002-01-03..            2000-01-04..            #> 10 -0028                   -0027-01-01..-28-01-01  -0028-12-31..-29-12-31  as_messydate(\"2001-01-01\") + as_messydate(\"2001-01-02..2001-01-04\") #>  'mdate' chr \"2001-01-01..2001-01-04\" as_messydate(\"2001-01-01\") + as_messydate(\"2001-01-03\") #>  'mdate' chr \"{2001-01-01,2001-01-03}\" as_messydate(\"2001-01-01..2001-01-04\") - as_messydate(\"2001-01-02\") #> [[1]] #>  'mdate' chr \"{2001-01-01,2001-01-03..2001-01-04}\" #>  #as_messydate(\"2001-01-01\") - as_messydate(\"2001-01-03\") # }"},{"path":"https://globalgov.github.io/messydates/reference/operate_inequalities.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical operations on messy dates — operate_inequalities","title":"Logical operations on messy dates — operate_inequalities","text":"Logical operations messy dates","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_inequalities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical operations on messy dates — operate_inequalities","text":"","code":"# S3 method for class 'mdate' e1 < e2  # S3 method for class 'mdate' e1 > e2  # S3 method for class 'mdate' e1 <= e2  # S3 method for class 'mdate' e1 >= e2"},{"path":"https://globalgov.github.io/messydates/reference/operate_inequalities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical operations on messy dates — operate_inequalities","text":"e1, e2 mdate class objects","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_inequalities.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Logical operations on messy dates — operate_inequalities","text":"< : tests whether dates first vector precede dates second vector. Returns NA date order determined. > : tests whether dates first vector succeed dates second vector. Returns NA date order determined. <= : tests whether dates first vector equal precede dates second vector. Returns NA date order determined. >= : tests whether dates first vector equal succeed dates second vector. Returns NA date order determined.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_inequalities.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical operations on messy dates — operate_inequalities","text":"","code":"as_messydate(\"2012-06-02\") > as.Date(\"2012-06-01\") # TRUE #> [1] TRUE # 2012-06-XX could mean 2012-06-03, so unknown if it comes before 2012-06-02 as_messydate(\"2012-06-XX\") < as.Date(\"2012-06-02\") # NA #> [1] NA # But 2012-06-XX cannot be before 2012-06-01 as_messydate(\"2012-06-XX\") >= as.Date(\"2012-06-01\") # TRUE #> [1] TRUE"},{"path":"https://globalgov.github.io/messydates/reference/operate_proportional.html","id":null,"dir":"Reference","previous_headings":"","what":"Proportion of messy dates meeting logical test — operate_proportional","title":"Proportion of messy dates meeting logical test — operate_proportional","text":"functions provide various proportional tests messy date objects.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_proportional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proportion of messy dates meeting logical test — operate_proportional","text":"","code":"e1 %l% e2  # S3 method for class 'mdate' e1 %l% e2  e1 %g% e2  # S3 method for class 'mdate' e1 %g% e2  e1 %ge% e2  # S3 method for class 'mdate' e1 %ge% e2  e1 %le% e2  # S3 method for class 'mdate' e1 %le% e2  e1 %><% e2  # S3 method for class 'mdate' e1 %><% e2  e1 %>=<% e2  # S3 method for class 'mdate' e1 %>=<% e2"},{"path":"https://globalgov.github.io/messydates/reference/operate_proportional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proportion of messy dates meeting logical test — operate_proportional","text":"e1, e2 mdate class objects","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_proportional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Proportion of messy dates meeting logical test — operate_proportional","text":"proportion comparison true. logical vector length mdate passed.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_proportional.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Proportion of messy dates meeting logical test — operate_proportional","text":"%l% : Tests proportion dates first vector precede minimum second vector. %g% : Tests proportion dates first vector follow maximum second vector. %ge% : Tests proportion dates first vector follow equal maximum second vector. %le% : Tests proportion dates first vector precede equal minimum second vector. %><% : Tests proportion dates first vector minimum maximum dates second vector. %>=<% : Tests proportion dates first vector minimum maximum dates second vector, inclusive.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_proportional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Proportion of messy dates meeting logical test — operate_proportional","text":"","code":"as_messydate(\"2012-06\") < as.Date(\"2012-06-02\") #> [1] NA   as_messydate(\"2012-06\") %l% as_messydate(\"2012-06-02\") #> [1] 0.03333333   as_messydate(\"2012-06\") > as.Date(\"2012-06-02\") #> [1] NA   as_messydate(\"2012-06\") %g% as_messydate(\"2012-06-02\") #> [1] 0.9333333   as_messydate(\"2012-06\") >= as.Date(\"2012-06-02\") #> [1] NA   as_messydate(\"2012-06\") %ge% as_messydate(\"2012-06-02\") #> [1] 0.9666667   as_messydate(\"2012-06\") <= as.Date(\"2012-06-02\") #> [1] NA   as_messydate(\"2012-06\") %le% \"2012-06-02\" #> [1] 0.06666667   as_messydate(\"2012-06\") %><% as_messydate(\"2012-06-15..2012-07-15\") #> [1] 0.516129   as_messydate(\"2012-06\") %>=<% as_messydate(\"2012-06-15..2012-07-15\") #> [1] 0.5333333"},{"path":"https://globalgov.github.io/messydates/reference/operate_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Set operations for messy dates — operate_set","title":"Set operations for messy dates — operate_set","text":"Performs intersection (md_intersect()) union (md_union()) , inter alia, messy date class objects. typical 'join' retains elements, even duplicated, please use md_multiset.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set operations for messy dates — operate_set","text":"","code":"e1 %intersect% e2  # S3 method for class 'mdate' e1 %intersect% e2  e1 %union% e2  # S3 method for class 'mdate' e1 %union% e2"},{"path":"https://globalgov.github.io/messydates/reference/operate_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set operations for messy dates — operate_set","text":"e1, e2 Messy date class objects","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set operations for messy dates — operate_set","text":"vector mode intersect, common mode union.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_set.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Set operations for messy dates — operate_set","text":"%intersect% : Find intersection sets messy dates %union% : Find intersection sets messy dates","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_set.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set operations for messy dates — operate_set","text":"","code":"as_messydate(\"2012-01-01..2012-01-20\") %intersect% as_messydate(\"2012-01\") #>  [1] \"2012-01-01\" \"2012-01-02\" \"2012-01-03\" \"2012-01-04\" \"2012-01-05\" #>  [6] \"2012-01-06\" \"2012-01-07\" \"2012-01-08\" \"2012-01-09\" \"2012-01-10\" #> [11] \"2012-01-11\" \"2012-01-12\" \"2012-01-13\" \"2012-01-14\" \"2012-01-15\" #> [16] \"2012-01-16\" \"2012-01-17\" \"2012-01-18\" \"2012-01-19\" \"2012-01-20\" as_messydate(\"2012-01-01..2012-01-20\") %union% as_messydate(\"2012-01\") #>  [1] \"2012-01-01\" \"2012-01-02\" \"2012-01-03\" \"2012-01-04\" \"2012-01-05\" #>  [6] \"2012-01-06\" \"2012-01-07\" \"2012-01-08\" \"2012-01-09\" \"2012-01-10\" #> [11] \"2012-01-11\" \"2012-01-12\" \"2012-01-13\" \"2012-01-14\" \"2012-01-15\" #> [16] \"2012-01-16\" \"2012-01-17\" \"2012-01-18\" \"2012-01-19\" \"2012-01-20\" #> [21] \"2012-01-21\" \"2012-01-22\" \"2012-01-23\" \"2012-01-24\" \"2012-01-25\" #> [26] \"2012-01-26\" \"2012-01-27\" \"2012-01-28\" \"2012-01-29\" \"2012-01-30\" #> [31] \"2012-01-31\""},{"path":"https://globalgov.github.io/messydates/reference/operate_statements.html","id":null,"dir":"Reference","previous_headings":"","what":"Logical statements on messy dates — operate_statements","title":"Logical statements on messy dates — operate_statements","text":"functions provide various logical statements messy date objects.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_statements.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Logical statements on messy dates — operate_statements","text":"","code":"is_messydate(x)  is_intersecting(x, y)  is_subset(x, y)  is_similar(x, y)  is_precise(x)  is_uncertain(x)  is_approximate(x)  is_bce(x)"},{"path":"https://globalgov.github.io/messydates/reference/operate_statements.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Logical statements on messy dates — operate_statements","text":"x, y mdate class objects","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_statements.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Logical statements on messy dates — operate_statements","text":"logical vector length mdate passed.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_statements.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Logical statements on messy dates — operate_statements","text":"is_messydate(): tests whether object inherits mdate class. rigorous validation required, see validate_messydate(). is_intersecting(): tests whether intersection two messy dates, leveraging intersect(). is_subset(): tests whether one messy date can found within messy date range set. is_similar(): tests whether two dates contain similar components. can useful identifying dates may typos one another. is_precise(): tests whether date precise (.e. 8 digit date). Non-precise dates contain markers approximate (.e. ~), unreliable (.e. ?), incomplete dates (.e. year ), date ranges sets. is_uncertain(): tests whether date uncertain (.e. contains ?). is_approximate(): tests whether date approximate (.e. contains ~). is_bce(): tests whether one messy dates found common era.","code":""},{"path":"https://globalgov.github.io/messydates/reference/operate_statements.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Logical statements on messy dates — operate_statements","text":"","code":"is_messydate(as_messydate(\"2012-01-01\")) #> [1] TRUE is_messydate(as.Date(\"2012-01-01\")) #> [1] FALSE is_intersecting(as_messydate(\"2012-01\"), as_messydate(\"2012-01-01..2012-02-22\")) #> [1] TRUE is_intersecting(as_messydate(\"2012-01\"), as_messydate(\"2012-02-01..2012-02-22\")) #> [1] FALSE is_subset(as_messydate(\"2012-01-01\"), as_messydate(\"2012-01\")) #> [1] TRUE is_subset(as_messydate(\"2012-01-01..2012-01-03\"), as_messydate(\"2012-01\")) #> [1] TRUE is_subset(as_messydate(\"2012-01-01\"), as_messydate(\"2012-02\")) #> [1] FALSE is_similar(as_messydate(\"2012-06-02\"), as_messydate(\"2012-02-06\")) #> [1] TRUE is_similar(as_messydate(\"2012-06-22\"), as_messydate(\"2012-02-06\")) #> [1] FALSE is_precise(as_messydate(c(\"2012-06-02\", \"2012-06\"))) #> [1]  TRUE FALSE is_uncertain(as_messydate(c(\"2012-06-02\", \"2012-06-02?\"))) #> [1] FALSE  TRUE is_approximate(as_messydate(c(\"2012-06-02~\", \"2012-06-02\"))) #> [1]  TRUE FALSE is_bce(as_messydate(c(\"2012-06-02\", \"-2012-06-02\"))) #> [1] FALSE  TRUE"},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-5-2","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.5.2","text":"Moved mreport() manydata Consolidated renamed scripts internally","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"coerce-to-0-5-2","dir":"Changelog","previous_headings":"","what":"Coerce to","title":"messydates 0.5.2","text":"Fixed pkgdown#2855 fixing as_messydate methods interpret infinite dates Fixed time zone defaults .POSIXct.mdate() .POSIXlt.mdate() Fixed set bug validate_messydate()","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"coerce-from-0-5-2","dir":"Changelog","previous_headings":"","what":"Coerce from","title":"messydates 0.5.2","text":"Renamed .numeric() .double() fix S3 dispatching Separated extrema functions min.mdate() max.mdate() summaries vmin.mdate() vmax.mdate() vector coercion Separated tendency functions mean.mdate(), median.mdate(), modal.mdate() summaries vmean.mdate(), vmedian.mdate(), vmodal.mdate() vector coercion Vector coercion previously random.mdate() now vrandom.mdate() Improved coercion/resolution functions handle BCE dates","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"manipulation-0-5-2","dir":"Changelog","previous_headings":"","what":"Manipulation","title":"messydates 0.5.2","text":"Fixed precision() calculates precision","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-5-1","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.5.1","text":"Fixed redirected url README Fixed pkgdown help links","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-5-0","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.5.0","text":"Dropped vignettes ‘outdated’ Dropped number tests provide rapid testing framework Dropped tibble dependency just using dplyr Updated Github workflows Updated testthat version 3, tests now run parallel Updated pkgdown bootstrap 5 Updated DESCRIPTION config packages","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-5-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.5.0","text":"Moved stringr stringi speed Added .numeric.mdate() as_messydate.numeric() coercing messydates numbers (closes #85) includes correct sequences leap years historical dates including common era Added is_bce() testing whether dates common era Added stri_squish() helper trimming white space everywhere Improved c.mdate() strip class mdate object, expected Improved is_uncertain() is_approximate() also recognise % annotations Improved min.mdate(), max.mdate(), modal.mdate() avoid using expand() consequently run much faster Improved min.mdate(), max.mdate(), modal.mdate(), mean.mdate(), median.mdate(), random.mdate() adding recursive argument resolving vectors scalar Fixed bug messyduration.mdate() minimum underspecified later date used Fixed bug as_messydate() zero padding early dates added correctly","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-041","dir":"Changelog","previous_headings":"","what":"messydates 0.4.1","title":"messydates 0.4.1","text":"CRAN release: 2024-04-19","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-4-1","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.4.1","text":"package now depends R versions bigger equal 4.0 since functions subsetting comparing ‘mdate’ objects rely functions introduced version","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-4-1","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.4.1","text":"Closed #83 fixing logical comparisons works negative year dates","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-4-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.4.0","text":"Closed #46 adding mdates_duration class introduces methods annotate duration period representations uncertainty Closed #72 fixing issues double unspecified components contracted correctly Closed #73 fixing bugs conversion dates month spelled Closed #74 #82 adding logical comparison operators ‘mdate’ objects (e.g. <, >, <=, >=) (thanks @WerthPADOH) Closed #76 adding proportional operators calculate proportion messy dates meeting logical tests (e.g. %l% %le%, %g%, %ge%, %><%, %>=<%) Closed #77 adding basic vector methods subsetting data frames (thanks @WerthPADOH) Added alias function mdate() as_messydate() Renamed set family functions work operators (.e. %intersect% %union%) Replaced is_element() is_subset() clarity consistency Closed #80 updating make_messydates() function also construct ranges dates","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-035","dir":"Changelog","previous_headings":"","what":"messydates 0.3.5","title":"messydates 0.3.5","text":"CRAN release: 2023-01-20","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-3-5","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.3.5","text":"Updated contract() function checks ‘mdate’ object expanded","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-3-4","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.3.4","text":"Corrected issues zero padding certain date ranges Added ‘US_party’ ‘N_actors’ additional variables replication purposes","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-3-4","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.3.4","text":"Fixed bugs zero padding ranges dates Fixed bugs re-ordering months day components incorrectly specified dates Closed #69 updating contract() function ‘expand’ dates ‘contracting’ Updated expand() function handle, properly convert, date objects ‘mdate’","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-033","dir":"Changelog","previous_headings":"","what":"messydates 0.3.3","title":"messydates 0.3.3","text":"CRAN release: 2022-12-20","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-3-3","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.3.3","text":"Moved cheatsheet.pdf ‘inst’ folder instead ‘man’ folder","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-3-2","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.3.2","text":"Closed #64 updating failing tests test aspects instead printing negative dates across OS Closed #65 updating cheatsheet new package changes","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-3-2","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.3.2","text":"Closed #62 adding “resequence” argument as_messydates() explicit date format conversion, necessary Closed #63 fixing issues unnecessary white spaces added date conversion","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-031","dir":"Changelog","previous_headings":"","what":"messydates 0.3.1","title":"messydates 0.3.1","text":"CRAN release: 2022-07-21","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-3-1","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.3.1","text":"Updated README removing unattractive package startup messages Updated battles data adding ‘parties’ variable","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-3-1","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.3.1","text":"Closed #54 adding new mreport() function properly report data containing ‘mdate’ variables Fixed bug expansion approximate dates Removed unnecessary function message","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-030","dir":"Changelog","previous_headings":"","what":"messydates 0.3.0","title":"messydates 0.3.0","text":"CRAN release: 2022-06-02","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-3-0","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.3.0","text":"Note breaking change Closed #41 creating skimr template mdate class","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-3-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.3.0","text":"Closed #26 adding “resequence” argument as_messydate() allowing users choose component order ambiguous dates Closed #45 improving as_messydate() re-orders 6 digit date components necessary Closed #48 adding zero padding incomplete date ranges sets dates Updated as_messydate() also extract dates text strings Added is_precise() function provides logical test precise dates Updated expand() allow expansion incomplete date ranges sets dates Closed #49 updating resolve functions expand dates precise","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-021","dir":"Changelog","previous_headings":"","what":"messydates 0.2.1","title":"messydates 0.2.1","text":"CRAN release: 2022-02-23","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-2-1","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.2.1","text":"Added vignette working messydates package","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-2-1","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.2.1","text":"Added S3 methods “+” “-” operators Added add() subtract() helper functions arithmetic operations Closed #31 updating approximate dates expanded account leap years Closed #34 updating expand() manage negative dates Added expand_negative_dates() helper function expanding ranges negative dates Added negative_dates() helper function coerce negative messydt dates Closed #39 updating resolve mean methods work negative dates Added compact_negative_dates() helper function compact negative date ranges Added .sequence() helper function check dates range Updated resequence script export interleave() function","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-020","dir":"Changelog","previous_headings":"","what":"messydates 0.2.0","title":"messydates 0.2.0","text":"CRAN release: 2021-11-12","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-2-0","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.2.0","text":"Added PANARCHIC project details README file Added cheatsheet Added new CSS style website updated functions displayed Updated pushrelease.yml workflow actions file stop installing messydates Github Updated README file stop installing messydates Github Fixed Codecov test coverage URL README file CRAN submission","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-2-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.2.0","text":"Expanded messydates checks class validity Fixed bugs make_messydate() on_or_before() on_or_after() as_approximate() as_uncertain() (includes discrimination month uncertainty day month uncertainty) Updated as_messydate() adding zero padding month, day year Updated resequence() work consistently messydate objects Updated expand() function expand imprecise, unspecified, approximate, uncertain, negative dates according approximate ranges added tests Updated precision() return lengths expanded dates Updated median() resolve family functions work changes expand() Added tests expand() Added tests contract() Added tests precision() Added tests coerce_from_messydate()","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"messydates-011","dir":"Changelog","previous_headings":"","what":"messydates 0.1.1","title":"messydates 0.1.1","text":"CRAN release: 2021-07-19","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-1-1","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.1.1","text":"Updated README explanation package /offers Fixed URL package website","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-1-0","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.1.0","text":"Updated call messydt class DESCRIPTION file","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-1-0","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.1.0","text":"Updated documentation as_messydate() functions Updated documentation expand() function Updated documentation resolve family functions Updated documentation coerce family functions Updated documentation coerce family functions","code":""},{"path":[]},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"package-0-0-1","dir":"Changelog","previous_headings":"","what":"Package","title":"messydates 0.0.1","text":"Added DESCRIPTION file Added R folder Added LICENSE file Added NAMESPACE file Added NEWS file Added README files Added .github folder files Added tests folder files Setup pkgdown website Added package logo","code":""},{"path":"https://globalgov.github.io/messydates/news/index.html","id":"functions-0-0-1","dir":"Changelog","previous_headings":"","what":"Functions","title":"messydates 0.0.1","text":"Added validation checks messydt class Added print methods messydt class as_messydate() standardises date order, separators ambiguity Added date class coercion Added POSIXct class coercion Added POSIXlt class coercion Added character class coercion Added .Date.messydt() coercing date class Added .POSIXct.messydt() coercing POSIXct class Added .POSIXlt.messydt() coercing POSIXlt class Added expand() function expanding ranged uncertain dates Added min.messydt() get minimum value expanded range Added max.messydt() get maximum value expanded range Added median.messydt() get median value expanded range Added mean.messydt() get mean value expanded range Added modal.messydt() get mode value expanded range Added contract() function contracting expanded dates Added year() extract year date Added month() extract month date Added day() extract day date Added make_messydate() function get messy dates multiple columns Added md_intersect() find intersection sets messy dates Added md_union() find union sets messy dates Added md_multiset() join two sets messy dates Added is_messydate() test messydt class Added is_intersecting() test dates intersect Added is_element() test multiple elements dates Added is_similar() test similarities dates Added tests messydt class às_messydate() function Added tests coerce messy dates functions Added tests coerce messy dates functions Added tests contract() function Added tests expand() function Added tests extract functions Added tests make_messydate() function Added tests resolve functions Added tests set functions","code":""}]
